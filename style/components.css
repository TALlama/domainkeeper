@layer components {
  :root {
    --color-selected-bg: hsl(120, 90%, 90%);

    --color-system-bg: lch(65% 55 200);
    --color-leadership-bg: orange;
    --color-civic-bg: lightblue;

    --color-critical-success-bg: lch(75% 55 200);
    --color-success-bg: lch(65% 55 150);
    --color-failure-bg: lch(65% 55 0);
    --color-critical-failure-bg: lch(65% 55 300);

    --header-bg: var(--text-color);
    --subheader-bg: hsl(0, 0%, 90%);
  }

  trait-list {
    display: block;

    ul {
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      gap: var(--internal-margin) var(--small-margin);
    }

    li .badge {
      border-width: 0;
      border-radius: 0;
      background-color: lightgreen;
      padding: var(--small-margin) var(--small-margin);
    }
  }

  ability-roll {
    --modifier-width: 1.5rem;

    display: inline-grid;
    grid-template-areas:
      "ability modifier"
      "bonuses bonuses ";
    grid-template-rows: 1rem 1fr;
    grid-template-columns: 1fr var(--modifier-width);
    
    .ability {
      grid-area: ability;
    }

    .modifier {
      grid-area: modifier;
      margin-left: auto;
    }

    .modifier-breakdown {
      grid-area: bonuses;
      font-size: var(--step--2);
      align-self: start;
      text-align: end;
      display: none;

      &:has(:nth-child(2)) { display: block }

      .modifier-contribution {
        display: inline-block;
        width: var(--modifier-width);
      }
    }
  }

  @property --unrest-percent {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }

  @property --unrest-color {
    syntax: "<color>";
    inherits: true;
    initial-value: white;
  }

  aside#sidebar {
    position: sticky;
    top: 0;
    padding-top: 0;
    max-height: 100vh;
    overflow: hidden;

    @media screen {
      border-right: 3px solid var(--text-color);
    }

    .rolls {
      > h4, h6 {
        background: var(--header-bg);
        border-bottom: 1px solid var(--header-bg);
        padding: var(--internal-margin);
        margin: var(--internal-margin) 0 0;
        font-size: var(--step--1);
      }

      h4 {
        color: white;
      }

      h6 {
        --header-bg: hsl(0, 0%, 90%);
        display: flex;
        gap: var(--internal-margin);
        align-items: center;

        > .total, > .dc {
          font-size: var(--step-1);
        }

        > .components {
          display: flex;
          flex-direction: column;
        }

        > .dc {
          margin-left: auto;

          &:before {
            content: "vs ";
            font-size: var(--step--2);
          }
        }
      }

      .dice-tray {
        max-width: 12em;
      }

      @media print { display: none; }
    }
  }
  
  domain-sheet {
    display: block;
    
    .domain-header {
      display: flex;
      gap: var(--internal-margin);

      .domain-data-management {
        margin-left: auto;

        a.unnecessary {
          opacity: 0.8;
        }
      }
    }

    h3, h4, h5, h6 {
      display: flex;
      background: var(--header-bg);
      border-bottom: 1px solid var(--header-bg);
      padding: var(--internal-margin);
      padding-right: var(--small-margin);
      margin: var(--internal-margin) 0 0;
      font-size: var(--step--1);

      .badge {
        margin-left: auto;
      }
    }

    h3, h4, h5 {
      color: white;
    }

    h3 {
      margin-top: 0;
    }

    .stats {
      position: relative;
      display: grid;
      grid-template-columns: auto 1fr auto auto;
      gap: var(--internal-margin);
      padding-inline: var(--small-margin);

      &:before {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        right: 0;
        left: 0;
        z-index: -1;

        --unrest-base-color: hsl(0, 100%, 80%, calc(1.5 * var(--unrest-percent)));
        --unrest-color: hsl(0, 100%, 80%, var(--unrest-percent));
        background: linear-gradient(to right, var(--unrest-base-color), var(--unrest-color) var(--unrest-percent, 0%), white 0 100%);
        transition: 0ms, --unrest-percent 1s, --unrest-color 500ms;
        transition-timing-function: cubic-bezier(0.000, 0.75, 0.75, 1.5);
      }


      > .stat {
        display: grid;
        grid-column: 1 / -1;
        grid-template-columns: subgrid;
        align-items: baseline;

        &.ability---danger {
          color: white;
          animation: internal-error-pulse 1s infinite alternate;
  
          input { color: white }
        }

        .icon-link {
          font-size: var(--step--1);
          align-self: center;
        }

        .current {
          grid-column: 1;
          flex-grow: 1;
        }
        label, .label {
          grid-column: 2;
        }
        .max {
          grid-column: 3;
          font-size: var(--step--2);

          &:before {
            content: "/ ";
          }
        }
        .ability-roll {
          grid-column: 4;
        }

        &.ability label { font-weight: 600; }
        &:not(.ability) label { grid-column-end: -1; }
        &:not(.ability) .ability-roll { display: none }
        &:not(.ability) .max { display: none }

        &.ability + &:not(.ability) {
          margin-top: var(--internal-margin);
        }
      }
    }

    hr {
      grid-column: 1 / -1;
      margin-block-start: 0;
      border-top: 1px solid black;
    }

    .actors {
      li {
        display: flex;
        align-items: baseline;
        gap: var(--internal-margin);
        padding: var(--small-margin);

        &.current {
          font-weight: 600;
          background: var(--color-selected-bg);
        }

        &.unavailable {
          display: none;
        }

        .badge {
          margin-left: auto;
        }

        & + li {
          border-top: 1px solid var(--text-color);
        }
      }
    }

    input[type="number"] {
      max-width: 5em;
      text-align: end;
      font-size: var(--step-0);
      border: none;
      background: transparent;
    }
  }

  .save-slot-management {
    sl-button-group {
      margin-bottom: var(--external-margin);
    }

    .save-slot {
      display: flex;
      align-items: center;
    }
  }

  @media print {
    .ability-roll {
      display: none;
    }

    input {
      border: none;
      width: 2em;
    }

    domain-sheet {
      .abilities, .stats, .leaders, .settlements {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: var(--external-margin);
        margin-bottom: 0;
        padding: 0;
      }

      input[type="number"] {
        text-align: start;

        &::-webkit-inner-spin-button, &::-webkit-outer-spin-button {
          -webkit-appearance: none;
          margin: 0;
        }
      }
    }

    activity-picker { display: none; }
  }

  actor-sheet {
    &:has(activity-picker[open]) {
      box-shadow: 0 0 var(--external-margin) var(--color-selected-bg), 0 0 var(--external-margin) var(--color-selected-bg), 0 0 var(--external-margin) var(--color-selected-bg);
    }

    h3 {
      display: flex;
      gap: var(--external-margin);
      align-items: baseline;
      background-color: var(--text-color);
      color: white;
      padding: var(--internal-margin);

      .badge {
        margin-left: auto;
      }
    }

    > article {
      border: 1px solid var(--text-color);
      padding: var(--internal-margin);

      > .powerups {
        > li {
          border: 1px solid var(--text-color);
          padding: var(--internal-margin);
        }
      }
    }

    > .actor-controls {
      border-bottom-width: 0;
      padding-bottom: 0;
    }

    > .event-controls {
      display: flex;
      border-top-width: 0;
      padding-top: 0;

      > .add-event {
        margin-inline-start: auto;
        margin-top: var(--external-margin);
      }

      > .add-event-pending {
        --button-bg: white;
      }
      
      > .add-event-ready {
        --button-bg: hsl(120, 40%, 60%);
        font-size: var(--step-3);
      }
    }
  }

  domain-activity-log {
    display: flex;
    flex-direction: column;
    gap: var(--external-margin);

    > .status-banner {
      font-size: var(--step-5);
      background-color: red;
      padding: var(--internal-margin);

      &:empty {
        display: none;
      }
    }

    .consumables {
      display: flex;
      flex-wrap: wrap;
      gap: var(--external-margin);

      font-size: var(--step--1);

      &:empty {
        &::before {
          content: "ðŸª¹ No consumables or statuses";
          opacity: 0.8;
        }
      }
    }

    .turns {
      display: flex;
      flex-direction: column;
      gap: var(--external-margin);
    }

    .turn {
      border-left: 3px solid var(--text-color);
      padding-left: var(--external-margin);

      .turn-marker {
        display: flex;
        background: var(--text-color);
        color: white;
        justify-content: center;
        align-items: center;
        margin-left: calc(-1 * var(--external-margin));
  
        .turn-name, .icon-name {
          padding: var(--internal-margin);
        }
      }

      summary {
        padding: var(--internal-margin);
        background: var(--subheader-bg);
        margin: 0 0 0 calc(-1 * var(--external-margin));
      }
    }

    .activities {
      display: flex;
      flex-direction: column;
      gap: var(--external-margin);

      &.activities---summary-spotlight activity-sheet {
        border-top-width: 0;
        border-left-width: 0;

        margin-left: calc(-1 * var(--external-margin));
      }
    }

    details .activities {
      margin-top: var(--external-margin);
    }
  }

  activity-picker {
    display: block;

    > .activities-list {
      display: grid;
      align-items: flex-end;
      grid-template-columns: repeat(auto-fill, minmax(10em, 1fr));
      gap: var(--internal-margin);
      align-items: stretch;

      + h4 { margin-top: var(--external-margin) }
    }

    h4 {
      font-weight: 600;
    }

    > .leadership-activities {
      --button-bg: var(--color-leadership-bg);
    }

    > .civic-activities {
      --button-bg: var(--color-civic-bg);
    }
  }

  activity-sheet {
    --bg: lightgray;
    --outcome-bg: var(--bg);
    --summary-bg: var(--subheader-bg);

    &[type="system"] { --bg: var(--color-system-bg); }
    &[type="leadership"] { --bg: var(--color-leadership-bg); }
    &[type="civic"] { --bg: var(--color-civic-bg); }

    &[outcome="criticalSuccess"] { --outcome-bg: var(--color-critical-success-bg); }
    &[outcome="success"] { --outcome-bg: var(--color-success-bg); }
    &[outcome="failure"] { --outcome-bg: var(--color-failure-bg); }
    &[outcome="criticalFailure"] { --outcome-bg: var(--color-critical-failure-bg); }

    border: 3px solid var(--bg);
    border-top-color: var(--outcome-bg);
    border-left-color: var(--outcome-bg);
    position: relative;
    display: grid;
    grid-template-areas:
      "header     "
      "summary"
      "body       ";

    &:has(> .icon) {
      grid-template-columns: 1fr 4rem;
      grid-template-areas:
        "header      icon"
        "summary     icon"
        "body        body";
    }

    &:not([resolved]) {
      box-shadow: 0 0 var(--external-margin) var(--color-selected-bg), 0 0 var(--external-margin) var(--color-selected-bg), 0 0 var(--external-margin) var(--color-selected-bg);
    }

    > header {
      grid-area: header;
      display: flex;
      align-items: baseline;
      background: linear-gradient(to right, var(--outcome-bg) 60%, var(--bg));
      border-bottom: 1px solid var(--bg);
      padding: var(--internal-margin);

      > small {
        font-size: var(--step--1);
        margin-left: var(--internal-margin);
        opacity: 0.8;;
      }
    }

    .activity-actions {
      margin-left: auto;
    }

    &[name="Build Structure"] {
      activity-decision-panel[name="Pick a structure"] {
        .pickable-group {
          --min-item-width: 15em;

          max-height: clamp(10em, 30vh, 30em);
          overflow: scroll;
        }

        structure-description .dc { display: inline }

        header structure-description {
          background: var(--color-selected-bg);
          margin: var(--internal-margin) 0;
          padding: var(--internal-margin);
        }
      }
    }

    &:has(.pick-ability input:checked) difficulty-class .mods {
      pointer-events: none;

      label:not(.base, :has(input:checked)), .other {
        --button-bg: white;
      }
    }

    > .icon {
      grid-area: icon;
      font-size: var(--step-5);
      background: var(--bg);
      padding: var(--internal-margin);
    }

    > .summary {
      grid-area: summary;
      background: var(--summary-bg);
      border-bottom: 1px solid var(--summary-bg);
      padding: var(--internal-margin);
      font-size: var(--step--1);
      display: flex;

      > a.icon-link {
        margin-left: auto;
      }
    }

    > .body {
      grid-area: body;

      h1, h2, h3, h4, h5, h6, header {
        --vertical-margin: var(--external-margin);

        background: linear-gradient(to right, var(--outcome-bg) 60%, var(--bg));
        border-bottom: 1px solid var(--outcome-bg);
        padding: var(--internal-margin);
        margin: var(--vertical-margin) 0;
        font-size: var(--step--1);
      }

      > .description {
        padding: var(--internal-margin);
        padding-top: 0;

        h1, h2, h3, h4, h5, h6, header {
          margin-inline: calc(-1 * var(--internal-margin));

          &:first-child { margin-top: 0 }
        }
      }

      activity-decision-panel {
        display: block;

        &:not([resolved]) {
          padding: 0 var(--internal-margin);

          h1, h2, h3, h4, h5, h6, header {
            margin-inline: calc(-1 * var(--internal-margin));
          }

          ~ activity-decision-panel {
            cursor: not-allowed;
            
            fieldset {
              opacity: .5;
              pointer-events: none;
            }
          }
        }

        &[resolved] {
          padding: 0;

          header, + .log header{
            --vertical-margin: 0;
          }
        }
      }
    }

    .log {
      display: none;
      &:has(ol li:not(.debug)) { display: block }

      .log-entry {
        --level-color: transparent;
        padding: var(--internal-margin);
        padding-left: var(--external-margin);
        background: linear-gradient(to right, var(--level-color), white var(--internal-margin));
        box-shadow: inset 0 0 var(--small-margin) var(--level-color);

        &.debug { --level-color: pink }
        &.warning { --level-color: orange }
        &.error { --level-color: red }
      }
    }
  }

  structure-description {
    display: grid;
    gap: var(--internal-margin);
    grid-template-columns: 1fr auto;
    grid-template-areas:
      "name    stats"
      "traits  traits"
      "body    body";
    font-weight: 400;
    
    > .header {
      grid-area: name;
      font-weight: 600;

      .template-name {
        margin-left: 1em;
        color: var(--text-color-muted);
        
        &:before { content: "(" }
        &:after { content: ")" }
      }
    }

    > .stats {
      grid-area: stats;
      font-size: var(--step--1);
      text-align: end;

      display: flex;
      gap: var(--internal-margin);

      > .dc { display: none }
    }

    trait-list {
      grid-area: traits;
    }

    > .body {
      grid-area: body;

      > .description {
        &:empty { display: none }

        &:not(:empty) + .effects:not(:empty) {
          margin-top: var(--internal-margin);
        }
      }

      > .bonuses {
        float: inline-end;
        margin-inline-start: var(--internal-margin);
        margin-block-end: var(--internal-margin);
        max-width: 40%;

        li {
          padding-left: 3ch;
          text-indent: -3ch;

          & + li {
            margin-top: var(--internal-margin);
          }
        }

        &:empty { display: none }
      }

      > .effects {
        &:empty { display: none }

        &:before {
          content: "Effects: ";
          font-weight: 600;
        }
      }

      > .info {
        margin-top: var(--internal-margin);
      }
    }

    /* when in the modal */
    .structure-details & {
      .name { display: none }
    }
  }

  .diff {
    margin-left: var(--internal-margin);
    &::before { content: "("}
    &::after { content: ")"}

    &.diff-negative { color: red }
    &.diff-positive { color: green }
  }

  .activity-summaries {
    display: flex;
    flex-wrap: wrap;

    a.icon-link:hover {
      z-index: 2;
    }

    a.icon-link:has(+ a:hover), a.icon-link:hover + a {
      scale: 1.2;
      z-index: 1;
    }
  }

  .activity-summary {
    --bg: lightgray;
    --outcome-bg: var(--bg);
    --type-bg: var(--bg);

    padding: var(--internal-margin);
    background:  var(--bg);
    border-top: var(--internal-margin) solid var(--outcome-bg);
    border-bottom: var(--internal-margin) solid var(--type-bg);

    &[data-outcome="criticalSuccess"] { --outcome-bg: var(--color-critical-success-bg); }
    &[data-outcome="success"] { --outcome-bg: var(--color-success-bg); }
    &[data-outcome="failure"] { --outcome-bg: var(--color-failure-bg); }
    &[data-outcome="criticalFailure"] { --outcome-bg: var(--color-critical-failure-bg); }

    &[data-type="system"] { --type-bg: var(--color-system-bg); }
    &[data-type="leadership"] { --type-bg: var(--color-leadership-bg); }
    &[data-type="civic"] { --type-bg: var(--color-civic-bg); }
  }

  button .modifier {
    padding-left: var(--internal-margin);
    opacity: .6;
  }

  .consumable {
    --_consumable-bg: yellow;
    --_consumable-color: var(--text-color);
    --_consumable-border-color: var(--consumable-color, var(--_consumable-color));

    color: var(--consumable-color, var(--_consumable-color));
    border: 1px solid var(--consumable-border-color, var(--_consumable-border-color));
    background: var(--consumable-bg, var(--_consumable-bg));
    padding: var(--internal-margin);

    &[data-use-by="end-of-turn"] {
      border-style: dashed;
    }

    .description {
      font-size: var(--step--1);
      margin-top: var(--internal-margin);
    }
  }

  .pickable-group {
    --min-item-width: 10em;

    margin: var(--external-margin) 0;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(var(--min-item-width), 1fr));

    .option-group {
      grid-column: 1 / -1;
      margin-block: var(--external-margin) 0;
      padding: var(--internal-margin) calc(2 * var(--internal-margin));
    }

    :is(label.pickable) {
      &:has(input:checked), &:hover {
        --button-bg: var(--color-selected-bg);
      }

      &:focus-within {
        outline: 2px dotted red;
      }
    }

    label.pickable + label.pickable {
      border-left-width: 0;
    }

    &:not(.repickable):has(input:checked) {
      .pickable {
        pointer-events: none;
      }

      .pickable:not(:has(input:checked)) {
        --button-bg: white;
        --button-color: hsl(0, 0%, 60%);
        --button-border-color: hsl(0, 0%, 80%);
      }
    }

    .pickable:has(ability-roll) {
      display: inline-flex;
      padding: 0;

      ability-roll {
        padding: var(--internal-margin);
        flex-grow: 1;
      }
    }

    .pickable:has(input[value="criticalSuccess"]):hover { --button-bg: var(--color-critical-success-bg) }
    .pickable:has(input[value="success"]):hover { --button-bg: var(--color-success-bg) }
    .pickable:has(input[value="failure"]):hover { --button-bg: var(--color-failure-bg) }
    .pickable:has(input[value="criticalFailure"]):hover { --button-bg: var(--color-critical-failure-bg) }
  }

  difficulty-class {
    display: flex;
    align-items: center;

    output {
      font-weight: 600;
      padding: var(--internal-margin);
    }

    .mods {
      display: flex;
      flex-wrap: wrap;
      align-items: stretch;

      label + label {
        border-left-width: 0;
      }
    }

    label {
      &.base, &:has(input:checked), &:hover {
        --button-bg: var(--color-selected-bg);
      }

      &:focused {
        outline: 1px dashed var(--color-selected-bg);
      }
    }

    .other {
      --button-bg: hsl(0, 0%, 90%);
      --button-color: var(--text-color);
      --button-border-color: var(--text-color);

      display: flex;
      align-items: center;
      gap: var(--internal-margin);
      border: 1px solid var(--button-border-color);
      border-left-width: 0;
      background-color: var(--button-bg);
      color: var(--button-border-color);
      padding: .2rem var(--internal-margin);
      font-size: var(--step-0);
      font-weight: 600;

      input {
        max-width: 7ch;
        border: none;
      }
    }
  }

  .outcome {
    .pickable-group &:has(input:checked), &:hover {
      &.outcome-critical-success { --button-bg: var(--color-critical-success-bg); }
      &.outcome-success { --button-bg: var(--color-success-bg); }
      &.outcome-failure { --button-bg: var(--color-failure-bg); }
      &.outcome-critical-failure { --button-bg: var(--color-critical-failure-bg); }
    }
  }

  .badge {
    display: flex;
    align-items: center;
    gap: var(--small-margin);
    background: white;
    color: var(--text-color);
    font-size: var(--step--2);
    border: 1px solid var(--text-color);
    border-radius: var(--internal-margin);
    padding: 0 var(--internal-margin);

    a {
      text-decoration: none;
    }
  }

  .trait-editor {
    display: flex;
    flex-wrap: wrap;
    gap: var(--small-margin);

    .trait.removed {
      text-decoration: line-through;
    }

    > sl-input {
      margin-inline-start: auto;
      max-width: 15ch;
    }
  }

  body:has([data-used-ability~="Culture"]:hover) [data-uses-ability~="Culture"],
  body:has([data-used-ability~="Economy"]:hover) [data-uses-ability~="Economy"],
  body:has([data-used-ability~="Loyalty"]:hover) [data-uses-ability~="Loyalty"],
  body:has([data-used-ability~="Stability"]:hover) [data-uses-ability~="Stability"] {
    outline: 2px solid rebeccapurple;
  }

  body:has([data-used-ability~="Culture"]:hover) [data-uses-ability="Culture"],
  body:has([data-used-ability~="Economy"]:hover) [data-uses-ability="Economy"],
  body:has([data-used-ability~="Loyalty"]:hover) [data-uses-ability="Loyalty"],
  body:has([data-used-ability~="Stability"]:hover) [data-uses-ability="Stability"] {
    outline: 5px solid rebeccapurple;
  }

  body:has([data-uses-ability~="Culture"]:hover) [data-used-ability~="Culture"],
  body:has([data-uses-ability~="Economy"]:hover) [data-used-ability~="Economy"],
  body:has([data-uses-ability~="Loyalty"]:hover) [data-used-ability~="Loyalty"],
  body:has([data-uses-ability~="Stability"]:hover) [data-used-ability~="Stability"] {
    outline: 2px solid rebeccapurple;
  }
}
